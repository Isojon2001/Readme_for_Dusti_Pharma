import React, { useEffect, useState } from 'react';
import { LayoutGrid, Eye, Users, User, Trash2 } from 'lucide-react';
import SidebarItem from '../components/SidebarItem';
import { useAuth } from '../context/AuthContext';
import '../index.css';

function Partner() {
  const { token, logout } = useAuth();
  const [users, setUsers] = useState([]);
  const [profile, setProfile] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);

  const itemsPerPage = 6;

  const filteredUsers = users.filter(user => {
    const term = searchTerm.toLowerCase();
    return (
      user['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']?.toLowerCase().includes(term) ||
      user['–í–∏–¥–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞']?.toLowerCase().includes(term) ||
      user['–¢–µ–ª–µ—Ñ–æ–Ω']?.toLowerCase().includes(term) ||
      user['–ú–µ–Ω–µ–¥–∂–µ—Ä–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞']?.toLowerCase().includes(term)
    );
  });

  const totalPages = Math.ceil(filteredUsers.length / itemsPerPage);
  const paginatedUsers = filteredUsers.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  useEffect(() => {
    if (!token) return;

    fetch('http://api.dustipharma.tj:1212/api/v1/app/admin/users?page=1&size=10000', {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    })
      .then(res => res.json())
      .then(data => {
        setUsers(data.payload || []);
      })
      .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err));
  }, [token]);

  useEffect(() => {
    if (!token) return;

    fetch('http://api.dustipharma.tj:1212/api/v1/app/profile/users', {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    })
      .then(res => res.json())
      .then(data => {
        const payload = data.payload;
        setProfile(Array.isArray(payload) ? payload[0] : payload || null);
      })
      .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err);
        setProfile(null);
      });
  }, [token]);

  const handleView = user => {
    alert(`üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:

–§.–ò.–û: ${user['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] || '‚Äî'}
–†–æ–ª—å: ${user['–í–∏–¥–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞'] || '‚Äî'}
–¢–µ–ª–µ—Ñ–æ–Ω: ${user['–¢–µ–ª–µ—Ñ–æ–Ω'] || '‚Äî'}
–ê–¥—Ä–µ—Å: ${user['–ê–¥—Ä–µ—Å'] || user['–ë–∏–∑–Ω–µ—Å–†–µ–≥–∏–æ–Ω'] || '‚Äî'}
–ò–ù–ù: ${user['–ò–ù–ù'] || '‚Äî'}
–ú–µ–Ω–µ–¥–∂–µ—Ä: ${user['–ú–µ–Ω–µ–¥–∂–µ—Ä–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞'] || '‚Äî'}
ID: ${user.id || '‚Äî'}`);
  };

  const handleDelete = async userId => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) return;

    try {
      const res = await fetch(`http://api.dustipharma.tj:1212/api/v1/app/admin/users/${userId}`, {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${res.status}`);
      setUsers(prev => prev.filter(u => u.id !== userId));
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
  };

  return (
    <div className="dashboard">
      <aside className="sidebar">
        <div>
          <div className="sidebar_logo">
            <img src="./Dusti_pharma.png" width="40" height="40" alt="logo" />
            <h2>–î—É—Å—Ç–∏ —Ñ–∞—Ä–º–∞</h2>
          </div>

          <div className="sidebar-menu">
            <SidebarItem icon={LayoutGrid} label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" to="/dashboard" />
            <SidebarItem icon={() => <img src="./Icons-3.svg" alt="–†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞" />} label="–†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞" to="/RoleAndRoot" />
            <SidebarItem icon={Users} label="Partner" to="/Partner" />
            <SidebarItem icon={() => <img src="./Icons-4.svg" alt="MobileApp" />} label="–ü–∞–Ω–µ–ª—å MobileApp" to="/mobile" />
            <SidebarItem icon={() => <img src="./call.svg" width={20} height={20} alt="–ó–≤–æ–Ω–∫–∏" />} label="–ñ—É—Ä–Ω–∞–ª –∑–≤–æ–Ω–∫–æ–≤" to="/calls" />
          </div>
        </div>

        <div className="sidebar_block">
          <p>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</p>
          <div className="sidebar_user">
            <div className="logo_flex">
              <div className="logo_user"><User className="user-icon"/></div>
              <div className="logo_profile">
                <h3>{profile?.['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']?.trim() || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</h3>
                <p>{profile?.['–í–∏–¥–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞']?.trim() || '–†–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
              </div>
                <button onClick={() => { logout(); window.location.href = '/'; }} className="logout-btn">
                  –í—ã–π—Ç–∏
                </button>
            </div>
          </div>
        </div>
      </aside>

      <main className="content">
        <div className="root_header">
          <h1>–ü–∞—Ä—Ç–Ω—ë—Ä—ã</h1>
          <input
            type="text"
            placeholder="–ù–∞–π—Ç–∏ –ø–æ –∏–º–µ–Ω–∏, —Ä–æ–ª–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—É..."
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
            className="search-input"
          />
        </div>

        <div className="back_color_table">
          <table className="user-table">
            <thead>
              <tr>
                <th>‚Ññ</th>
                <th>–§.–ò.–û</th>
                <th>–ö–æ–Ω—Ç—Ä–ê–≥–µ–Ω—Ç</th>
                <th>–ê–¥—Ä–µ—Å</th>
                <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                <th>–ú–µ–Ω–µ–¥–∂–µ—Ä</th>
                <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
              </tr>
            </thead>
            <tbody>
              {paginatedUsers.map((u, index) => (
                <tr key={u.id || index}>
                  <td>{(currentPage - 1) * itemsPerPage + index + 1}</td>
                  <td>{u['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] || '‚Äî'}</td>
                  <td>{u['–í–∏–¥–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞'] || '‚Äî'}</td>
                  <td>{u['–ë–∏–∑–Ω–µ—Å–†–µ–≥–∏–æ–Ω'] || u['–ê–¥—Ä–µ—Å'] || '–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</td>
                  <td>{u['–¢–µ–ª–µ—Ñ–æ–Ω'] || '‚Äî'}</td>
                  <td>{u['–ú–µ–Ω–µ–¥–∂–µ—Ä–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞'] || '–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</td>
                  <td style={{ display: 'flex', gap: '10px', justifyContent: 'center' }}>
                    <Eye size={20} style={{ cursor: 'pointer' }} onClick={() => handleView(u)} />
                    <Trash2 size={20} color="red" style={{ cursor: 'pointer' }} onClick={() => handleDelete(u.id)} />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          <div className="pagination_controls">
            <button disabled={currentPage === 1} onClick={() => setCurrentPage(prev => prev - 1)}>
              ‚óÄ –ù–∞–∑–∞–¥
            </button>
            <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}</span>
            <button disabled={currentPage === totalPages} onClick={() => setCurrentPage(prev => prev + 1)}>
              –í–ø–µ—Ä—ë–¥ ‚ñ∂
            </button>
          </div>
        </div>
      </main>
    </div>
  );
}

export default Partner;